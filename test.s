#  .data -- описания переменных инициализированные.
#  .text -- команды процессору.
#
#  .section .rodata -- константы.  (c некоторой вероятносьтью будет объединено с .text)
#  .bss -- неинициализированные переменные. (приклеивается к .data)
#

#
# задание меток. метки метят адрес в памяти.
# имя_метки: 
#
# .global имя_метки --- метка доступна из другого файла.
#

# и нструкции
#
# префикс_инструкции имя_инструкцииb   // 8-битные аргументы  byte
#   ---- // ---                    w   // 16-битные аргументы word
#   ---- // ---                    l   // 32                  long word 
#    ----// ---                    q   // 64   quad
#                                  o ? // 128  octal

#
#  инстр аргумент,  аргумент, аргумент
#
# .att-syntax -- результат инструкции всегда сохраняется в последний аргумент.

#  какие аргументы:
#  1. регистр (обознач с % в начале например %rbp, %eax)
#  2. число    ($число  например $3-2,  $'\n', $имя_метки, $0b11111000, $0x1232342345)
#  3. адрес в памяти (если без доллара)
#      3.a - прямая адресация - просто число
#      3.b  - косвенная адресация адресация по регистру (  8(%ebp) , имя_метки(%ebp, %eax, 4) )
#              имя_метки(%ebp, %eax, 4)  ----> %ebp + %eax*4 + имя_метки   1, 2, 4, 8, [16]  
#
#

# регистры USER SPACE
#
# x86 , x86_64/amd64
#
#  x86
#
#  31                           0
#  |                            | eax
#                 15             
#  |              |             |
#                       ax
#                        7
#  |              |      |      |
#                    ah     al
#  eax  
#  ebx
#  ecx
#  edx
#  edi   --> di
#  esi   --> si
#  ebp   --> bp
#  esp   --> sp
#
#  eip --> ip (НЕТ ЯВНОГО ОБРАЩЕНИЯ!!!!!)
#  eflags  Состояние программы (Нельзя явно обращаться).
#

#
# x86_64 
#
#
# rax, rbx, ... rsp, r8, ...., r15
  
  eflags -- rflags?
  rip -- доступен для чтения.

#

#
# инструкции семейства
#
# арифметические:
#    add
#    sub
#    mul, imul
#    div, idiv
#    inc
#    dec
#    adc - сложение со значением флага CF в регистре флагов.
#    sbb - вычитание с CF
#    xx|xx       13
#    yy|yy       01
#                20

# neg -- смена знака

#   CF - переполнение разрядности
#   OF - знаковое переполнение
#   ZF - результат вычисления 0
#   SF - флаг знака 1 - если число отрицательное
#   DF - флаг направления (ЗАБИТЬ И НЕ ИСПОЛЬЗОВАТЬ ПО ВОЗМОЖНОСТИ)
#   PF - чётность (младшие 8 бит содержат чётное число единиц)

# инструкции перехода
#
#  jmp адрес
#  jmp *%eax --- переход по значению регистра.
#  
#  
#  ja (above) переход по беззнаковолму больше.
#  jb (below) беззнаковое меньше
#  jae >=
#  jbe <=
#  jl < - знаковое
#  jg >
#  jge >=
#  jle <=
#  je ==
#
#  jo - OF=1   jno
#  jz - ZF=1   jnz
#  js -        jns
#  jd ?
#  jp ?

# перемещение значений
# mov что, куда

# перемещения с расширением
# movzx  --- Забивает старшую часть 0 (беззнаковое расширение)
# movsz  ---- Забивает 1111111111 - если отрицателшьное и 0000000 если положительное).
#
# cmovz --- копирование значения происходит только если выставлен флаг ZF.
# 

# побитовые операции:
  xor
  and
  or
  not

#  сдвиги
 shl
 shr
 sal
 sar
 ral
 rar
 rcl
 rcr 

# работа со стеком
 push $12                    
 pop  %eax                   movl (%esp), %eax
                             addl $4, %esp                     
    |     |
    |     |
--> | 12  | esp  rsp 
    |     |

 call address     movl (%esp), %eip
                  subl %esp,   $4
                  jmp  address
  
 ret число


# call conventions
   SystemV ABI amd64, x86_64 и i686 x86 - архитектура

32 - бита

1. параметры -- передаются через стек в  обратном порядке  f(a,b,c)
     push c
     push b
     push a

2. вызывающий очищает стек.
     add $12, %esp

3. возврат результата 
   1 - байт    al
   2 - байта   ax
   4 - байта   eax
   8 - байт    edx:eax
  числа с плавающей точкой возвращаются в регистре st(0) - математического сопроцессора FPU

4. Регистры которые функции разрешается портить: eax, ecx, edx

fast call
 первый аргумент в eax,
 второй в ecx 
 остальные через стек.
 
---------------------------------------------

64 - бита

1. первые 6 параметров передаются через регистры rdi, rsi, rdx, rcx, r8, r9
   остальные через стек.

2. вызывающий очищает стек

3. 1 - байт    al                                                                                   
   2 - байта   ax                                                                                   
   4 - байта   eax                                                                                  
   8 - байт    rax
  16 - байт    rdx:rax

числа с плавающей точкой через SSE в регистре xmm0

4. rdi, rsi, rdx, rcx, r8, r9, rax, rcx, rdx, r10, r11 

-----------------------------------------------------------

r8b -- 1 байт
r8w -- 2 байта
r8l -- 4 байта

